/*
 * Fabric Core 1.11.4
 * Vicon Datastream EDK wrap
 */

#include "ViconTimeCodeStandard.h" // Automatically generated by kl2edk
#include "ViconTimeCodeStandard_functions.h"
#include <Client.h> // Vicon header
#include "conversion.h"

using namespace ViconDataStreamSDK::CPP::TimecodeStandard;

namespace
{
  inline Enum StringToEnum(const char* i_string)
  {
    if(!strcmp(i_string, "None"))
      return None;
    else if(!strcmp(i_string, "PAL"))
      return PAL;
    else if(!strcmp(i_string, "NTSC"))
      return NTSC;
    else if(!strcmp(i_string, "NTSCDrop"))
      return NTSCDrop;
    else if(!strcmp(i_string, "Film"))
      return Film;           
    else
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(None, "%s: %s", "Invalid ViconDirection name", i_string);
  }  
  inline Fabric::EDK::KL::String EnumToString(const Enum i_enum)
  {
    switch(i_enum)
    {
      case None:
        return "None";
      case PAL:
        return "PAL";
      case NTSC:
        return "NTSC";
      case NTSCDrop:
        return "NTSCDrop";
      case Film:
        return "Film";             
      default:
        FABRIC_EXT_SETERROR_AND_RETURN_VALUE("", "%s: %i", "Invalid ViconDirection code", int(i_enum));
    }
  }
}

FABRIC_EXT_EXPORT void ViconTimeCodeStandardFromString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconTimeCodeStandard >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  this_.handle = new Enum(StringToEnum(name.data()));
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 ViconTimeCodeStandardAsCode(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconTimeCodeStandard >::INParam this_
)
{
  Enum resultEnum;
  if (conv_from_KLStruct(this_, resultEnum))
  {
    return Fabric::EDK::KL::Integer(resultEnum);
  } else {
    FABRIC_EXT_SETERROR_AND_RETURN_VALUE(0, "%s: %s", "ViconTimeCodeStandardAsCode", "Invalid ViconTimeCodeStandard");
  }
}

FABRIC_EXT_EXPORT void ViconTimeCodeStandardAsString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconTimeCodeStandard >::INParam this_
)
{
  Enum resultEnum;
  if (conv_from_KLStruct(this_, resultEnum))
  {
    _result = EnumToString(resultEnum);
  } else {
    _result = "Unknown";
    FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconTimeCodeStandardAsString", "Invalid ViconTimeCodeStandard");
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconTimeCodeStandardEqual(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconTimeCodeStandard >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconTimeCodeStandard >::INParam b
)
{
  Enum enumA;
  Enum enumB;
  if (conv_from_KLStruct(a, enumA) && conv_from_KLStruct(b, enumB))
  {
    return (enumA == enumB);
  } else {
    FABRIC_EXT_SETERROR_AND_RETURN_VALUE(false, "%s: %s", "ViconTimeCodeStandardEqual", "Invalid ViconTimeCodeStandard");
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconTimeCodeStandardNotEqual(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconTimeCodeStandard >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconTimeCodeStandard >::INParam b
)
{
  Enum enumA;
  Enum enumB;
  if (conv_from_KLStruct(a, enumA) && conv_from_KLStruct(b, enumB))
  {
    return (enumA != enumB);
  } else {
    FABRIC_EXT_SETERROR_AND_RETURN_VALUE(true, "%s: %s", "ViconTimeCodeStandardNotEqual", "Invalid ViconTimeCodeStandard");
  }
}
