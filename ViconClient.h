#ifndef __KL2EDK_AUTOGEN_ViconClient__
#define __KL2EDK_AUTOGEN_ViconClient__

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.4
////////////////////////////////////////////////////////////////

#include <Fabric/EDK/EDK.h>
#if FABRIC_EDK_VERSION_MAJ != 1 || FABRIC_EDK_VERSION_MIN != 11
# error "This file needs to be rebuilt for the current EDK version!"
#endif

#include "global.h"
#include "ViconResult.h"

namespace Fabric { namespace EDK { namespace KL {

// KL object 'ViconClient'
// Defined at ./ViconClient.kl:12:1

class ViconClient
{
private:
  
  struct Members
  {
    Data handle;
    ViconResult result;
  };
  
  struct Bits
  {
    ObjectCore objectCore;
    Members members;
    Object::Bits interfaceObjectBits;
  } *m_bits;
  
protected:
  
  friend struct Traits< ViconClient >;
  
  static void ConstructEmpty( ViconClient *self )
  {
    self->m_bits = 0;
  }
  
  static void ConstructCopy( ViconClient *self, ViconClient const *other )
  {
    if ( (self->m_bits = other->m_bits) )
      AtomicUInt32Increment( &self->m_bits->objectCore.refCount );
  }
  
  static void AssignCopy( ViconClient *self, ViconClient const *other )
  {
    if ( self->m_bits != other->m_bits )
    {
      Destruct( self );
      ConstructCopy( self, other );
    }
  }
  
  static void Destruct( ViconClient *self )
  {
    if ( self->m_bits
      && AtomicUInt32DecrementAndGetValue( &self->m_bits->objectCore.refCount ) == 0 )
    {
      ObjectCore *objectCorePtr = &self->m_bits->objectCore;
      self->m_bits->objectCore.lTableSwapPtrPtr->get()->lifecycleDestroy(
        &objectCorePtr
        );
    }
  }
  
public: 
  
  typedef ViconClient &Result;
  typedef ViconClient const &INParam;
  typedef ViconClient &IOParam;
  
  ViconClient()
  {
    ConstructEmpty( this );
  }
  
  static ViconClient Create()
  {
    static KL::SwapPtr<void> const *sp = 0;
    if ( !sp )
    {
      sp = static_cast<KL::SwapPtr<void> const *>(
        s_callbacks.m_lookupGlobalSymbol(
          "sp.function.kl.OO_ViconClient.createEmptyForEDK.io_AS0.OO_ViconClient",
          69
          )
        );
    }
    ViconClient result;
    ((void (*)(void *))sp->get())( &result );
    return result;
  }
  
  ViconClient( ViconClient const &that )
  {
    ConstructCopy( this, &that );
  }
  
  ViconClient &operator =( ViconClient const &that )
  {
    AssignCopy( this, &that );
    return *this;
  }
  
  ~ViconClient()
  {
    Destruct( this );
  }
  
  void appendDesc( String::IOParam string ) const
  {
    if ( m_bits )
    {
      ObjectCore *objectCorePtr = &m_bits->objectCore;
      objectCorePtr->lTableSwapPtrPtr->get()->appendDesc(
        string, &objectCorePtr
        );
    }
    else string.append( "null", 4 );
  }
  Type getType() const
  {
    if ( m_bits )
    {
      return Type( m_bits->objectCore.typeInfoSwapPtrPtr->get() );
    }
    else return Type();
  }
  
  bool isValid() const
  {
    return !!m_bits;
  }
  
  operator bool() const
  {
    return isValid();
  }
  
  bool operator !() const
  {
    return !isValid();
  }
  
  Members *operator ->()
  {
    return &m_bits->members;
  }
  
  Members const *operator ->() const
  {
    return &m_bits->members;
  }
  
  bool operator ==( INParam that )
  {
    return m_bits == that.m_bits;
  }
  
  bool operator !=( INParam that )
  {
    return m_bits != that.m_bits;
  }
  
  // Methods for 'Object'
};

inline void Traits<ViconClient>::ConstructEmpty( ViconClient &val )
{
  ViconClient::ConstructEmpty( &val );
}
inline void Traits<ViconClient>::ConstructCopy( ViconClient &lhs, ViconClient const &rhs )
{
  ViconClient::ConstructCopy( &lhs, &rhs );
}
inline void Traits<ViconClient>::AssignCopy( ViconClient &lhs, ViconClient const &rhs )
{
  ViconClient::AssignCopy( &lhs, &rhs );
}
inline void Traits<ViconClient>::Destruct( ViconClient &val )
{
  ViconClient::Destruct( &val );
}

}}}

#endif // __KL2EDK_AUTOGEN_ViconClient__
