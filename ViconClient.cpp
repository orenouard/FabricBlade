/*
 * Fabric Core 1.11.4
 * Vicon Datastream EDK wrap
 */

#include "ViconClient.h" // Automatically generated by kl2edk
#include "ViconClient_functions.h" // Automatically generated by kl2edk
#include <Client.h> // Vicon header
#include "Handle.h"
#include "conversion.h"

using namespace ViconDataStreamSDK::CPP;

namespace
{
  std::string Adapt( const DeviceType::Enum i_DeviceType )
  {
    switch( i_DeviceType )
    {
      case DeviceType::ForcePlate:
        return "ForcePlate";
      case DeviceType::Unknown:
      default:
        return "Unknown";
    }
  }

  std::string Adapt( const Unit::Enum i_Unit )
  {
    switch( i_Unit )
    {
      case Unit::Meter:
        return "Meter";
      case Unit::Volt:
        return "Volt";
      case Unit::NewtonMeter:
        return "NewtonMeter";
      case Unit::Newton:
        return "Newton";
      case Unit::Unknown:
      default:
        return "Unknown";
    }
  }
}

FABRIC_EXT_EXPORT void ViconClientConstructor(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  this_->handle = new Handle<ViconDataStreamSDK::CPP::Client>(new ViconDataStreamSDK::CPP::Client()); 
}

FABRIC_EXT_EXPORT void ViconClientDestructor(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  if(this_->handle != NULL)
    delete((Handle<ViconDataStreamSDK::CPP::Client>*)this_->handle);
}

FABRIC_EXT_EXPORT void ViconClientGetVersion(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconVersion >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::INParam this_
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    conv_to_ViconVersion(client->GetVersion(), _result);
  }
}

FABRIC_EXT_EXPORT void ViconClientConnect(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam hostName
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    try {
      conv_to_KLStruct(client->Connect(hostName.data()).Result, this_->result);
      if (!isSuccess(this_->result))
        FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientConnect", toString(this_->result));      
    } catch (std::runtime_error e) {
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientConnect", e.what());
    }
  }
}

FABRIC_EXT_EXPORT void ViconClientConnectToMulticast(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam hostName,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam multicastIP
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    try {
      conv_to_KLStruct(client->ConnectToMulticast(hostName.data(), multicastIP.data()).Result, this_->result);
      if (!isSuccess(this_->result))
        FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientConnectToMulticast", toString(this_->result));            
    } catch (std::runtime_error e) {
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientConnectToMulticast", e.what());
    }
  }  
}

FABRIC_EXT_EXPORT void ViconClientDisconnect(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    try {
      conv_to_KLStruct(client->Disconnect().Result, this_->result);
      if (!isSuccess(this_->result))
        FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientDisconnect", toString(this_->result));    
    } catch (std::runtime_error e) {
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientDisconnect", e.what());
    }
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconClientIsConnected(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::INParam this_
)
{
  bool flag = false;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
    flag = client->IsConnected().Connected;
  return flag;  
}

FABRIC_EXT_EXPORT void ViconClientStartTransmittingMulticast(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam serverIP,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam multicastIP
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    try {
      conv_to_KLStruct(client->StartTransmittingMulticast(serverIP.data(), multicastIP.data()).Result, this_->result);
      if (!isSuccess(this_->result))
        FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientStartTransmittingMulticast", toString(this_->result));          
    } catch (std::runtime_error e) {
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientStartTransmittingMulticast", e.what());
    }
  }    
}

FABRIC_EXT_EXPORT void ViconClientStopTransmittingMulticast(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    try {
      conv_to_KLStruct(client->StopTransmittingMulticast().Result, this_->result);
      if (!isSuccess(this_->result))
        FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientStopTransmittingMulticast", toString(this_->result));         
    } catch (std::runtime_error e) {
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientStopTransmittingMulticast", e.what());
    }
  }  
}

FABRIC_EXT_EXPORT void ViconClientEnableSegmentData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam flag
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    if (flag)
      conv_to_KLStruct(client->EnableSegmentData().Result, this_->result);
    else
      conv_to_KLStruct(client->DisableSegmentData().Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientEnableSegmentData", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientEnableMarkerData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam flag
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    if (flag)
      conv_to_KLStruct(client->EnableMarkerData().Result, this_->result);
    else
      conv_to_KLStruct(client->DisableMarkerData().Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientEnableMerkerData", toString(this_->result));    
  }
}

FABRIC_EXT_EXPORT void ViconClientEnableUnlabeledMarkerData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam flag
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    if (flag)
      conv_to_KLStruct(client->EnableUnlabeledMarkerData().Result, this_->result);
    else
      conv_to_KLStruct(client->DisableUnlabeledMarkerData().Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientEnableUnlabeledMarkerData", toString(this_->result));        
  }
}

FABRIC_EXT_EXPORT void ViconClientEnableDeviceData(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Boolean >::INParam flag
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    if (flag)
      conv_to_KLStruct(client->EnableDeviceData().Result, this_->result);
    else
      conv_to_KLStruct(client->DisableDeviceData().Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientEnableDeviceData", toString(this_->result));         
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconClientIsSegmentDataEnabled(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::INParam this_
)
{
  bool flag = false;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
    flag = client->IsSegmentDataEnabled().Enabled;
  return flag;
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconClientIsMarkerDataEnabled(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::INParam this_
)
{
  bool flag = false;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
    flag = client->IsMarkerDataEnabled().Enabled;
  return flag;
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconClientIsUnlabeledMarkerDataEnabled(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::INParam this_
)
{
  bool flag = false;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
    flag = client->IsUnlabeledMarkerDataEnabled().Enabled;
  return flag;
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconClientIsDeviceDataEnabled(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::INParam this_
)
{
  bool flag = false;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
    flag = client->IsDeviceDataEnabled().Enabled;
  return flag;
}

FABRIC_EXT_EXPORT void ViconClientSetStreamMode(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconStreamMode >::INParam mode
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    ViconDataStreamSDK::CPP::StreamMode::Enum streamEnum;
    if (conv_from_KLStruct(mode, streamEnum))
      conv_to_KLStruct(client->SetStreamMode(streamEnum).Result, this_->result);
      if (!isSuccess(this_->result))
        FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientSetStreamMode", toString(this_->result));    
  }  
}

FABRIC_EXT_EXPORT void ViconClientSetAxisMapping(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconAxisMapping >::INParam map
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    ViconDataStreamSDK::CPP::Output_GetAxisMapping omap;
    if (conv_from_ViconAxisMapping(map, omap))
    {
      conv_to_KLStruct(client->SetAxisMapping(omap.XAxis, omap.YAxis, omap.ZAxis).Result, this_->result);
      if (!isSuccess(this_->result))
        FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientSetAxisMapping", toString(this_->result));
    }
  }  
}

FABRIC_EXT_EXPORT void ViconClientGetAxisMapping(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconAxisMapping >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::INParam this_
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
    conv_to_ViconAxisMapping(client->GetAxisMapping(), _result);
}

FABRIC_EXT_EXPORT void ViconClientGetFrame(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    conv_to_KLStruct(client->GetFrame().Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetFrame", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 ViconClientGetFrameNumber(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  unsigned int frame = 0;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetFrameNumber getFrameOutput = client->GetFrameNumber();
    frame = getFrameOutput.FrameNumber;
    conv_to_KLStruct(getFrameOutput.Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(frame, "%s: %s", "ViconClientGetFrameNumber", toString(this_->result));
  }
  return frame;
}

FABRIC_EXT_EXPORT void ViconClientGetTimecode(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconTimeCode >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetTimecode timeCodeOutput = client->GetTimecode();
    conv_to_KLStruct(timeCodeOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_ViconTimeCode(timeCodeOutput, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetTimecode", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 ViconClientGetLatencySampleCount(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  unsigned int nbSamples = 0;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetLatencySampleCount nbSamplesOutput = client->GetLatencySampleCount();
    nbSamples = nbSamplesOutput.Count;
    conv_to_KLStruct(nbSamplesOutput.Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(nbSamples, "%s: %s", "ViconClientGetLatencySampleCount", toString(this_->result));
  }
  return nbSamples;
}

FABRIC_EXT_EXPORT void ViconClientGetLatencySampleName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam index
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetLatencySampleName sampleOutput = client->GetLatencySampleName(index);
    conv_to_KLStruct(sampleOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_String(sampleOutput.Name, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetLatencySampleName", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 ViconClientGetLatencySampleValue(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  double latency = 0;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetLatencySampleValue sampleOutput = client->GetLatencySampleValue(name.data());
    latency = sampleOutput.Value;
    conv_to_KLStruct(sampleOutput.Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(latency, "%s: %s", "ViconClientGetLatencySampleValue", toString(this_->result));
  }
  return latency;
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Float64 ViconClientGetLatencyTotal(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  double latency = 0;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetLatencyTotal latencyOutput = client->GetLatencyTotal();
    latency = latencyOutput.Total;
    conv_to_KLStruct(latencyOutput.Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(latency, "%s: %s", "ViconClientGetLatencyTotal", toString(this_->result));
  }
  return latency;
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 ViconClientGetSubjectCount(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_
)
{
  unsigned int nbSubjects = 0;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSubjectCount nbSubjectsOutput = client->GetSubjectCount();
    nbSubjects = nbSubjectsOutput.SubjectCount;
    conv_to_KLStruct(nbSubjectsOutput.Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(nbSubjects, "%s: %s", "ViconClientGetSubjectCount", toString(this_->result));
  }
  return nbSubjects;
}

FABRIC_EXT_EXPORT void ViconClientGetSubjectName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam index
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSubjectName subjectOutput = client->GetSubjectName(index);
    conv_to_KLStruct(subjectOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_String(subjectOutput.SubjectName, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSubjectName", toString(this_->result));
  }
}


FABRIC_EXT_EXPORT void ViconClientGetSubjectRootSegmentName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSubjectRootSegmentName rootOutput = client->GetSubjectRootSegmentName(subject.data());
    conv_to_KLStruct(rootOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_String(rootOutput.SegmentName, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSubjectRootSegmentName", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 ViconClientGetSegmentCount(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject
)
{
  unsigned int nbSegments = 0;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentCount nbSegmentsOutput = client->GetSegmentCount(subject.data());
    nbSegments = nbSegmentsOutput.SegmentCount;
    conv_to_KLStruct(nbSegmentsOutput.Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(nbSegments, "%s: %s", "ViconClientGetSegmentCount", toString(this_->result));
  }
  return nbSegments;
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam index
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentName segmentOutput = client->GetSegmentName(subject.data(), index);
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
      _result = Fabric::EDK::KL::String(segmentOutput.SegmentName);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentName", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::UInt32 ViconClientGetSegmentChildCount(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  unsigned int nbChilds = 0;
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentChildCount segmentOutput = client->GetSegmentChildCount(subject.data(), segment.data());
    nbChilds = segmentOutput.SegmentCount;
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (!isSuccess(this_->result))
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(nbChilds, "%s: %s", "ViconClientGetSegmentChildCount", toString(this_->result));
  }
  return nbChilds;
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentChildName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::UInt32 >::INParam index
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentChildName segmentOutput = client->GetSegmentChildName(subject.data(), segment.data(), index);
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_String(segmentOutput.SegmentName, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentChildName", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentParentName(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentParentName segmentOutput = client->GetSegmentParentName(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_String(segmentOutput.SegmentName, _result);
    else
      _result = "";
      // FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentParentName", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentStaticTranslation(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentStaticTranslation segmentOutput = client->GetSegmentStaticTranslation(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_Vec3(segmentOutput.Translation, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentStaticTranslation", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentStaticRotationHelical(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentStaticRotationHelical segmentOutput = client->GetSegmentStaticRotationHelical(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_Vec3(segmentOutput.Rotation, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentStaticRotationHelical", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentStaticRotationMatrix(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat33 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentStaticRotationMatrix segmentOutput = client->GetSegmentStaticRotationMatrix(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_Mat33(segmentOutput.Rotation, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentStaticRotationMatrix", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentStaticRotationQuaternion(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Quat >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentStaticRotationQuaternion segmentOutput = client->GetSegmentStaticRotationQuaternion(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_Quat(segmentOutput.Rotation, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentStaticRotationQuaternion", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentStaticRotationEulerXYZ(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Euler >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentStaticRotationEulerXYZ segmentOutput = client->GetSegmentStaticRotationEulerXYZ(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
      conv_to_Euler(segmentOutput.Rotation, _result);
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentStaticRotationEulerXYZ", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentGlobalTranslation(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentGlobalTranslation segmentOutput = client->GetSegmentGlobalTranslation(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Vec3(segmentOutput.Translation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentGlobalTranslation", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentGlobalRotationHelical(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentGlobalRotationHelical segmentOutput = client->GetSegmentGlobalRotationHelical(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Vec3(segmentOutput.Rotation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentGlobalRotationHelical", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentGlobalRotationMatrix(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat33 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentGlobalRotationMatrix segmentOutput = client->GetSegmentGlobalRotationMatrix(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Mat33(segmentOutput.Rotation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentGlobalRotationMatrix", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentGlobalRotationQuaternion(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Quat >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentGlobalRotationQuaternion segmentOutput = client->GetSegmentGlobalRotationQuaternion(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Quat(segmentOutput.Rotation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentGlobalRotationQuaternion", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentGlobalRotationEulerXYZ(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Euler >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentGlobalRotationEulerXYZ segmentOutput = client->GetSegmentGlobalRotationEulerXYZ(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Euler(segmentOutput.Rotation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentGlobalRotationEulerXYZ", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentLocalTranslation(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentLocalTranslation segmentOutput = client->GetSegmentLocalTranslation(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Vec3(segmentOutput.Translation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentLocalTranslation", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentLocalRotationHelical(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Vec3 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentLocalRotationHelical segmentOutput = client->GetSegmentLocalRotationHelical(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Vec3(segmentOutput.Rotation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentLocalRotationHelical", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentLocalRotationMatrix(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Mat33 >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentLocalRotationMatrix segmentOutput = client->GetSegmentLocalRotationMatrix(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Mat33(segmentOutput.Rotation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentLocalRotationMatrix", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentLocalRotationQuaternion(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Quat >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentLocalRotationQuaternion segmentOutput = client->GetSegmentLocalRotationQuaternion(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Quat(segmentOutput.Rotation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentLocalRotationQuaternion", toString(this_->result));
  }
}

FABRIC_EXT_EXPORT void ViconClientGetSegmentLocalRotationEulerXYZ(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::Euler >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconClient >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam subject,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam segment
)
{
  ViconDataStreamSDK::CPP::Client * client;
  if (conv_from_KLObject(this_, client))
  {
    const ViconDataStreamSDK::CPP::Output_GetSegmentLocalRotationEulerXYZ segmentOutput = client->GetSegmentLocalRotationEulerXYZ(subject.data(), segment.data());
    conv_to_KLStruct(segmentOutput.Result, this_->result);
    if (isSuccess(this_->result))
    {
      conv_to_Euler(segmentOutput.Rotation, _result);
      this_->result.occluded = segmentOutput.Occluded;
    }
    else
      FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconClientGetSegmentLocalRotationEulerXYZ", toString(this_->result));
  }
}
