/*
 * Fabric Core 1.11.4
 * Vicon Datastream EDK wrap
 */

#include "ViconDirection.h" // Automatically generated by kl2edk
#include "ViconDirection_functions.h"
#include <Client.h> // Vicon header
#include "conversion.h"

using namespace ViconDataStreamSDK::CPP::Direction;

namespace
{
  inline Enum StringToEnum(const char* i_string)
  {
    if(!strcmp(i_string, "Up"))
      return Up;
    else if(!strcmp(i_string, "Down"))
      return Down;
    else if(!strcmp(i_string, "Left"))
      return Left;
    else if(!strcmp(i_string, "Right"))
      return Right;
    else if(!strcmp(i_string, "Forward"))
      return Forward;
    else if(!strcmp(i_string, "Backward"))
      return Backward;                
    else
      FABRIC_EXT_SETERROR_AND_RETURN_VALUE(Up, "%s: %s", "Invalid ViconDirection name", i_string);
  }  
  inline Fabric::EDK::KL::String EnumToString(const Enum i_enum)
  {
    switch(i_enum)
    {
      case Up:
        return "Up";
      case Down:
        return "Down";
      case Left:
        return "Left";
      case Right:
        return "Right";
      case Forward:
        return "Forward";
      case Backward:
        return "Backward";                 
      default:
        FABRIC_EXT_SETERROR_AND_RETURN_VALUE("", "%s: %i", "Invalid ViconDirection code", int(i_enum));
    }
  }
}

FABRIC_EXT_EXPORT void ViconDirectionFromString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconDirection >::IOParam this_,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::INParam name
)
{
  this_.handle = new Enum(StringToEnum(name.data()));
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::SInt32 ViconDirectionAsCode(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconDirection >::INParam this_
)
{
  Enum resultEnum;
  if (conv_from_KLStruct(this_, resultEnum))
  {
    return Fabric::EDK::KL::Integer(resultEnum);
  } else {
    FABRIC_EXT_SETERROR_AND_RETURN_VALUE(0, "%s: %s", "ViconDirectionAsCode", "Invalid ViconDirection");
  }
}

FABRIC_EXT_EXPORT void ViconDirectionAsString(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::String >::Result _result,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconDirection >::INParam this_
)
{
  Enum resultEnum;
  if (conv_from_KLStruct(this_, resultEnum))
  {
    _result = EnumToString(resultEnum);
  } else {
    _result = "Unknown";
    FABRIC_EXT_SETERROR_AND_RETURN("%s: %s", "ViconDirectionAsString", "Invalid ViconDirection");
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconDirectionEqual(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconDirection >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconDirection >::INParam b
)
{
  Enum enumA;
  Enum enumB;
  if (conv_from_KLStruct(a, enumA) && conv_from_KLStruct(b, enumB))
  {
    return (enumA == enumB);
  } else {
    FABRIC_EXT_SETERROR_AND_RETURN_VALUE(false, "%s: %s", "ViconDirectionEqual", "Invalid ViconDirection");
  }
}

FABRIC_EXT_EXPORT Fabric::EDK::KL::Boolean ViconDirectionNotEqual(
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconDirection >::INParam a,
  Fabric::EDK::KL::Traits< Fabric::EDK::KL::ViconDirection >::INParam b
)
{
  Enum enumA;
  Enum enumB;
  if (conv_from_KLStruct(a, enumA) && conv_from_KLStruct(b, enumB))
  {
    return (enumA != enumB);
  } else {
    FABRIC_EXT_SETERROR_AND_RETURN_VALUE(true, "%s: %s", "ViconDirectionNotEqual", "Invalid ViconDirection");
  }
}
