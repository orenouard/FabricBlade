#ifndef __KL2EDK_AUTOGEN_global__
#define __KL2EDK_AUTOGEN_global__

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2exe version 1.11.4
////////////////////////////////////////////////////////////////

#include <Fabric/EDK/EDK.h>
#if FABRIC_EDK_VERSION_MAJ != 1 || FABRIC_EDK_VERSION_MIN != 11
# error "This file needs to be rebuilt for the current EDK version!"
#endif

// forward declarations
namespace Fabric { namespace EDK { namespace KL {
  class Object;
  struct ARGB;
  struct Box2;
  struct Box3;
  struct Color;
  struct Euler;
  struct Mat22;
  struct Mat33;
  struct Mat44;
  struct Quat;
  struct RGB;
  struct RGBA;
  struct Ray;
  struct RotationOrder;
  struct Vec2;
  struct Vec3;
  struct Vec3_d;
  struct Vec4;
  struct ViconAxisMapping;
  class ViconClient;
  struct ViconDirection;
  struct ViconResult;
  struct ViconStreamMode;
  struct ViconTimeCode;
  struct ViconTimeCodeStandard;
  struct ViconVersion;
  struct Xfo;
}}}

#include "aliases.h"

namespace Fabric { namespace EDK { namespace KL {

// KL interface 'Object'
// Defined at (internal):0:0

class Object
{
public:
  
  struct VTable
  {
  };
  
  struct Bits
  {
    ObjectCore *objectCorePtr;
    SwapPtr<VTable const> const *vTableSwapPtrPtr;
  } *m_bits;
  
protected:
  
  friend struct Traits< Object >;
  
  static void ConstructEmpty( Object *self )
  {
    self->m_bits = 0;
  }
  
  static void ConstructCopy( Object *self, Object const *other )
  {
    if ( (self->m_bits = other->m_bits) )
      AtomicUInt32Increment( &self->m_bits->objectCorePtr->refCount );
  }
  
  static void AssignCopy( Object *self, Object const *other )
  {
    if ( self->m_bits != other->m_bits )
    {
      Destruct( self );
      ConstructCopy( self, other );
    }
  }
  
  static void Destruct( Object *self )
  {
    if ( self->m_bits
      && AtomicUInt32DecrementAndGetValue( &self->m_bits->objectCorePtr->refCount ) == 0 )
    {
      self->m_bits->objectCorePtr->lTableSwapPtrPtr->get()->lifecycleDestroy(
        &self->m_bits->objectCorePtr
        );
    }
  }
  
public: 
  
  typedef Object &Result;
  typedef Object const &INParam;
  typedef Object &IOParam;
  
  Object()
  {
    ConstructEmpty( this );
  }
  
  Object( Object const &that )
  {
    ConstructCopy( this, &that );
  }
  
  Object &operator =( Object const &that )
  {
    AssignCopy( this, &that );
    return *this;
  }
  
  ~Object()
  {
    Destruct( this );
  }
  
  void appendDesc( String::IOParam string ) const
  {
    if ( m_bits )
      m_bits->objectCorePtr->lTableSwapPtrPtr->get()->appendDesc( string, &m_bits->objectCorePtr );
    else string.append( "null", 4 );
  }
  
  bool isValid() const
  {
    return !!m_bits;
  }
  
  operator bool() const
  {
    return isValid();
  }
  
  bool operator !() const
  {
    return !isValid();
  }
  
  bool operator ==( INParam that )
  {
    return m_bits == that.m_bits;
  }
  
  bool operator !=( INParam that )
  {
    return m_bits != that.m_bits;
  }
  
};

template<>
struct Traits< Object >
{
  typedef Object &Result;
  typedef Object const &INParam;
  typedef Object &IOParam;
  
  static void ConstructEmpty( Object &val );
  static void ConstructCopy( Object &lhs, Object const &rhs );
  static void AssignCopy( Object &lhs, Object const &rhs );
  static void Destruct( Object &val );
};

inline void Traits<Object>::ConstructEmpty( Object &val )
{
  Object::ConstructEmpty( &val );
}
inline void Traits<Object>::ConstructCopy( Object &lhs, Object const &rhs )
{
  Object::ConstructCopy( &lhs, &rhs );
}
inline void Traits<Object>::AssignCopy( Object &lhs, Object const &rhs )
{
  Object::AssignCopy( &lhs, &rhs );
}
inline void Traits<Object>::Destruct( Object &val )
{
  Object::Destruct( &val );
}

template<>
struct Traits< RGB >
{
  typedef RGB &Result;
  typedef RGB const &INParam;
  typedef RGB &IOParam;
  
  static void ConstructEmpty( RGB &val );
  static void ConstructCopy( RGB &lhs, RGB const &rhs );
  static void AssignCopy( RGB &lhs, RGB const &rhs );
  static void Destruct( RGB &val );
};

template<>
struct Traits< RGBA >
{
  typedef RGBA &Result;
  typedef RGBA const &INParam;
  typedef RGBA &IOParam;
  
  static void ConstructEmpty( RGBA &val );
  static void ConstructCopy( RGBA &lhs, RGBA const &rhs );
  static void AssignCopy( RGBA &lhs, RGBA const &rhs );
  static void Destruct( RGBA &val );
};

template<>
struct Traits< ARGB >
{
  typedef ARGB &Result;
  typedef ARGB const &INParam;
  typedef ARGB &IOParam;
  
  static void ConstructEmpty( ARGB &val );
  static void ConstructCopy( ARGB &lhs, ARGB const &rhs );
  static void AssignCopy( ARGB &lhs, ARGB const &rhs );
  static void Destruct( ARGB &val );
};

template<>
struct Traits< Color >
{
  typedef Color &Result;
  typedef Color const &INParam;
  typedef Color &IOParam;
  
  static void ConstructEmpty( Color &val );
  static void ConstructCopy( Color &lhs, Color const &rhs );
  static void AssignCopy( Color &lhs, Color const &rhs );
  static void Destruct( Color &val );
};

template<>
struct Traits< Vec2 >
{
  typedef Vec2 &Result;
  typedef Vec2 const &INParam;
  typedef Vec2 &IOParam;
  
  static void ConstructEmpty( Vec2 &val );
  static void ConstructCopy( Vec2 &lhs, Vec2 const &rhs );
  static void AssignCopy( Vec2 &lhs, Vec2 const &rhs );
  static void Destruct( Vec2 &val );
};

template<>
struct Traits< Vec3 >
{
  typedef Vec3 &Result;
  typedef Vec3 const &INParam;
  typedef Vec3 &IOParam;
  
  static void ConstructEmpty( Vec3 &val );
  static void ConstructCopy( Vec3 &lhs, Vec3 const &rhs );
  static void AssignCopy( Vec3 &lhs, Vec3 const &rhs );
  static void Destruct( Vec3 &val );
};

template<>
struct Traits< Vec3_d >
{
  typedef Vec3_d &Result;
  typedef Vec3_d const &INParam;
  typedef Vec3_d &IOParam;
  
  static void ConstructEmpty( Vec3_d &val );
  static void ConstructCopy( Vec3_d &lhs, Vec3_d const &rhs );
  static void AssignCopy( Vec3_d &lhs, Vec3_d const &rhs );
  static void Destruct( Vec3_d &val );
};

template<>
struct Traits< Vec4 >
{
  typedef Vec4 &Result;
  typedef Vec4 const &INParam;
  typedef Vec4 &IOParam;
  
  static void ConstructEmpty( Vec4 &val );
  static void ConstructCopy( Vec4 &lhs, Vec4 const &rhs );
  static void AssignCopy( Vec4 &lhs, Vec4 const &rhs );
  static void Destruct( Vec4 &val );
};

template<>
struct Traits< Ray >
{
  typedef Ray &Result;
  typedef Ray const &INParam;
  typedef Ray &IOParam;
  
  static void ConstructEmpty( Ray &val );
  static void ConstructCopy( Ray &lhs, Ray const &rhs );
  static void AssignCopy( Ray &lhs, Ray const &rhs );
  static void Destruct( Ray &val );
};

template<>
struct Traits< Mat22 >
{
  typedef Mat22 &Result;
  typedef Mat22 const &INParam;
  typedef Mat22 &IOParam;
  
  static void ConstructEmpty( Mat22 &val );
  static void ConstructCopy( Mat22 &lhs, Mat22 const &rhs );
  static void AssignCopy( Mat22 &lhs, Mat22 const &rhs );
  static void Destruct( Mat22 &val );
};

template<>
struct Traits< Mat33 >
{
  typedef Mat33 &Result;
  typedef Mat33 const &INParam;
  typedef Mat33 &IOParam;
  
  static void ConstructEmpty( Mat33 &val );
  static void ConstructCopy( Mat33 &lhs, Mat33 const &rhs );
  static void AssignCopy( Mat33 &lhs, Mat33 const &rhs );
  static void Destruct( Mat33 &val );
};

template<>
struct Traits< Mat44 >
{
  typedef Mat44 &Result;
  typedef Mat44 const &INParam;
  typedef Mat44 &IOParam;
  
  static void ConstructEmpty( Mat44 &val );
  static void ConstructCopy( Mat44 &lhs, Mat44 const &rhs );
  static void AssignCopy( Mat44 &lhs, Mat44 const &rhs );
  static void Destruct( Mat44 &val );
};

template<>
struct Traits< Box2 >
{
  typedef Box2 &Result;
  typedef Box2 const &INParam;
  typedef Box2 &IOParam;
  
  static void ConstructEmpty( Box2 &val );
  static void ConstructCopy( Box2 &lhs, Box2 const &rhs );
  static void AssignCopy( Box2 &lhs, Box2 const &rhs );
  static void Destruct( Box2 &val );
};

template<>
struct Traits< Box3 >
{
  typedef Box3 &Result;
  typedef Box3 const &INParam;
  typedef Box3 &IOParam;
  
  static void ConstructEmpty( Box3 &val );
  static void ConstructCopy( Box3 &lhs, Box3 const &rhs );
  static void AssignCopy( Box3 &lhs, Box3 const &rhs );
  static void Destruct( Box3 &val );
};

template<>
struct Traits< RotationOrder >
{
  typedef RotationOrder &Result;
  typedef RotationOrder const &INParam;
  typedef RotationOrder &IOParam;
  
  static void ConstructEmpty( RotationOrder &val );
  static void ConstructCopy( RotationOrder &lhs, RotationOrder const &rhs );
  static void AssignCopy( RotationOrder &lhs, RotationOrder const &rhs );
  static void Destruct( RotationOrder &val );
};

template<>
struct Traits< Euler >
{
  typedef Euler &Result;
  typedef Euler const &INParam;
  typedef Euler &IOParam;
  
  static void ConstructEmpty( Euler &val );
  static void ConstructCopy( Euler &lhs, Euler const &rhs );
  static void AssignCopy( Euler &lhs, Euler const &rhs );
  static void Destruct( Euler &val );
};

template<>
struct Traits< Quat >
{
  typedef Quat &Result;
  typedef Quat const &INParam;
  typedef Quat &IOParam;
  
  static void ConstructEmpty( Quat &val );
  static void ConstructCopy( Quat &lhs, Quat const &rhs );
  static void AssignCopy( Quat &lhs, Quat const &rhs );
  static void Destruct( Quat &val );
};

template<>
struct Traits< Xfo >
{
  typedef Xfo &Result;
  typedef Xfo const &INParam;
  typedef Xfo &IOParam;
  
  static void ConstructEmpty( Xfo &val );
  static void ConstructCopy( Xfo &lhs, Xfo const &rhs );
  static void AssignCopy( Xfo &lhs, Xfo const &rhs );
  static void Destruct( Xfo &val );
};

template<>
struct Traits< ViconResult >
{
  typedef ViconResult &Result;
  typedef ViconResult const &INParam;
  typedef ViconResult &IOParam;
  
  static void ConstructEmpty( ViconResult &val );
  static void ConstructCopy( ViconResult &lhs, ViconResult const &rhs );
  static void AssignCopy( ViconResult &lhs, ViconResult const &rhs );
  static void Destruct( ViconResult &val );
};

template<>
struct Traits< ViconStreamMode >
{
  typedef ViconStreamMode &Result;
  typedef ViconStreamMode const &INParam;
  typedef ViconStreamMode &IOParam;
  
  static void ConstructEmpty( ViconStreamMode &val );
  static void ConstructCopy( ViconStreamMode &lhs, ViconStreamMode const &rhs );
  static void AssignCopy( ViconStreamMode &lhs, ViconStreamMode const &rhs );
  static void Destruct( ViconStreamMode &val );
};

template<>
struct Traits< ViconVersion >
{
  typedef ViconVersion &Result;
  typedef ViconVersion const &INParam;
  typedef ViconVersion &IOParam;
  
  static void ConstructEmpty( ViconVersion &val );
  static void ConstructCopy( ViconVersion &lhs, ViconVersion const &rhs );
  static void AssignCopy( ViconVersion &lhs, ViconVersion const &rhs );
  static void Destruct( ViconVersion &val );
};

template<>
struct Traits< ViconDirection >
{
  typedef ViconDirection &Result;
  typedef ViconDirection const &INParam;
  typedef ViconDirection &IOParam;
  
  static void ConstructEmpty( ViconDirection &val );
  static void ConstructCopy( ViconDirection &lhs, ViconDirection const &rhs );
  static void AssignCopy( ViconDirection &lhs, ViconDirection const &rhs );
  static void Destruct( ViconDirection &val );
};

template<>
struct Traits< ViconAxisMapping >
{
  typedef ViconAxisMapping &Result;
  typedef ViconAxisMapping const &INParam;
  typedef ViconAxisMapping &IOParam;
  
  static void ConstructEmpty( ViconAxisMapping &val );
  static void ConstructCopy( ViconAxisMapping &lhs, ViconAxisMapping const &rhs );
  static void AssignCopy( ViconAxisMapping &lhs, ViconAxisMapping const &rhs );
  static void Destruct( ViconAxisMapping &val );
};

template<>
struct Traits< ViconTimeCodeStandard >
{
  typedef ViconTimeCodeStandard &Result;
  typedef ViconTimeCodeStandard const &INParam;
  typedef ViconTimeCodeStandard &IOParam;
  
  static void ConstructEmpty( ViconTimeCodeStandard &val );
  static void ConstructCopy( ViconTimeCodeStandard &lhs, ViconTimeCodeStandard const &rhs );
  static void AssignCopy( ViconTimeCodeStandard &lhs, ViconTimeCodeStandard const &rhs );
  static void Destruct( ViconTimeCodeStandard &val );
};

template<>
struct Traits< ViconTimeCode >
{
  typedef ViconTimeCode &Result;
  typedef ViconTimeCode const &INParam;
  typedef ViconTimeCode &IOParam;
  
  static void ConstructEmpty( ViconTimeCode &val );
  static void ConstructCopy( ViconTimeCode &lhs, ViconTimeCode const &rhs );
  static void AssignCopy( ViconTimeCode &lhs, ViconTimeCode const &rhs );
  static void Destruct( ViconTimeCode &val );
};

template<>
struct Traits< ViconClient >
{
  typedef ViconClient &Result;
  typedef ViconClient const &INParam;
  typedef ViconClient &IOParam;
  
  static void ConstructEmpty( ViconClient &val );
  static void ConstructCopy( ViconClient &lhs, ViconClient const &rhs );
  static void AssignCopy( ViconClient &lhs, ViconClient const &rhs );
  static void Destruct( ViconClient &val );
};

}}}

#endif // __KL2EDK_AUTOGEN_global__
